// shows a simple implementation of summation and product in Mist.

// functional implementation of sum and prod using fold
fsum :: (l: []f32) -> f32 = l.fold(f32.+, 0.0)

fprod :: (l: []f32) -> f32 = l.fold(f32.*, 1.0)

// iterative implementation of sum and prod

isum :: (l: []f32) -> f32 {
    sum := 0.0f32;
    
    for x in l {
        sum += x
    }
    sum
}

iprod :: (l: []f32) -> f32 {
    prod := 1.0f32;
    
    for x in l {
        prod *= x
    }
    prod
}

main :: () {
    l := [1.0, 2.0, 3.0, 4.0, 5.0]
    fs, df := fsum(l), fprod(l)
    assert(fs == 15.0)
    assert(fd == 120.0)
  
    is, id := isum(l), iprod(l)
    assert(is == 15.0)
    assert(id == 120.0)
}
